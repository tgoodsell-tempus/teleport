// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: prehog/v1alpha/teleport.proto

package v1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// the kind of a "resource" as intended by ResourceHeartbeatEvent
type ResourceKind int32

const (
	ResourceKind_RESOURCE_KIND_UNSPECIFIED     ResourceKind = 0
	ResourceKind_RESOURCE_KIND_NODE            ResourceKind = 1
	ResourceKind_RESOURCE_KIND_APP_SERVER      ResourceKind = 2
	ResourceKind_RESOURCE_KIND_KUBE_SERVER     ResourceKind = 3
	ResourceKind_RESOURCE_KIND_DB_SERVER       ResourceKind = 4
	ResourceKind_RESOURCE_KIND_WINDOWS_DESKTOP ResourceKind = 5
	ResourceKind_RESOURCE_KIND_NODE_OPENSSH    ResourceKind = 6
)

// Enum value maps for ResourceKind.
var (
	ResourceKind_name = map[int32]string{
		0: "RESOURCE_KIND_UNSPECIFIED",
		1: "RESOURCE_KIND_NODE",
		2: "RESOURCE_KIND_APP_SERVER",
		3: "RESOURCE_KIND_KUBE_SERVER",
		4: "RESOURCE_KIND_DB_SERVER",
		5: "RESOURCE_KIND_WINDOWS_DESKTOP",
		6: "RESOURCE_KIND_NODE_OPENSSH",
	}
	ResourceKind_value = map[string]int32{
		"RESOURCE_KIND_UNSPECIFIED":     0,
		"RESOURCE_KIND_NODE":            1,
		"RESOURCE_KIND_APP_SERVER":      2,
		"RESOURCE_KIND_KUBE_SERVER":     3,
		"RESOURCE_KIND_DB_SERVER":       4,
		"RESOURCE_KIND_WINDOWS_DESKTOP": 5,
		"RESOURCE_KIND_NODE_OPENSSH":    6,
	}
)

func (x ResourceKind) Enum() *ResourceKind {
	p := new(ResourceKind)
	*p = x
	return p
}

func (x ResourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[0].Descriptor()
}

func (ResourceKind) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[0]
}

func (x ResourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceKind.Descriptor instead.
func (ResourceKind) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{0}
}

// DiscoverResource represents a resource type.
type DiscoverResource int32

const (
	DiscoverResource_DISCOVER_RESOURCE_UNSPECIFIED                    DiscoverResource = 0
	DiscoverResource_DISCOVER_RESOURCE_SERVER                         DiscoverResource = 1
	DiscoverResource_DISCOVER_RESOURCE_KUBERNETES                     DiscoverResource = 2
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED  DiscoverResource = 3
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED     DiscoverResource = 4
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED   DiscoverResource = 5
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS          DiscoverResource = 6
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MYSQL_RDS             DiscoverResource = 7
	DiscoverResource_DISCOVER_RESOURCE_APPLICATION_HTTP               DiscoverResource = 8
	DiscoverResource_DISCOVER_RESOURCE_APPLICATION_TCP                DiscoverResource = 9
	DiscoverResource_DISCOVER_RESOURCE_WINDOWS_DESKTOP                DiscoverResource = 10
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS         DiscoverResource = 11
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT     DiscoverResource = 12
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED DiscoverResource = 13
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED     DiscoverResource = 14
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP          DiscoverResource = 15
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_MYSQL_GCP             DiscoverResource = 16
	DiscoverResource_DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP         DiscoverResource = 17
)

// Enum value maps for DiscoverResource.
var (
	DiscoverResource_name = map[int32]string{
		0:  "DISCOVER_RESOURCE_UNSPECIFIED",
		1:  "DISCOVER_RESOURCE_SERVER",
		2:  "DISCOVER_RESOURCE_KUBERNETES",
		3:  "DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED",
		4:  "DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED",
		5:  "DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED",
		6:  "DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS",
		7:  "DISCOVER_RESOURCE_DATABASE_MYSQL_RDS",
		8:  "DISCOVER_RESOURCE_APPLICATION_HTTP",
		9:  "DISCOVER_RESOURCE_APPLICATION_TCP",
		10: "DISCOVER_RESOURCE_WINDOWS_DESKTOP",
		11: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS",
		12: "DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT",
		13: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED",
		14: "DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED",
		15: "DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP",
		16: "DISCOVER_RESOURCE_DATABASE_MYSQL_GCP",
		17: "DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP",
	}
	DiscoverResource_value = map[string]int32{
		"DISCOVER_RESOURCE_UNSPECIFIED":                    0,
		"DISCOVER_RESOURCE_SERVER":                         1,
		"DISCOVER_RESOURCE_KUBERNETES":                     2,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED":  3,
		"DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED":     4,
		"DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED":   5,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS":          6,
		"DISCOVER_RESOURCE_DATABASE_MYSQL_RDS":             7,
		"DISCOVER_RESOURCE_APPLICATION_HTTP":               8,
		"DISCOVER_RESOURCE_APPLICATION_TCP":                9,
		"DISCOVER_RESOURCE_WINDOWS_DESKTOP":                10,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS":         11,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT":     12,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED": 13,
		"DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED":     14,
		"DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP":          15,
		"DISCOVER_RESOURCE_DATABASE_MYSQL_GCP":             16,
		"DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP":         17,
	}
)

func (x DiscoverResource) Enum() *DiscoverResource {
	p := new(DiscoverResource)
	*p = x
	return p
}

func (x DiscoverResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverResource) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[1].Descriptor()
}

func (DiscoverResource) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[1]
}

func (x DiscoverResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverResource.Descriptor instead.
func (DiscoverResource) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{1}
}

// DiscoverStatus represents a Discover Step outcome.
type DiscoverStatus int32

const (
	DiscoverStatus_DISCOVER_STATUS_UNSPECIFIED DiscoverStatus = 0
	// The user tried to complete the action and it succeeded.
	DiscoverStatus_DISCOVER_STATUS_SUCCESS DiscoverStatus = 1
	// The system skipped the step.
	// For example:
	// When setting up a Database and there's already a Database Service proxying the DB.
	// In this case the Database Agent installation is skipped.
	DiscoverStatus_DISCOVER_STATUS_SKIPPED DiscoverStatus = 2
	// The user tried to complete the action and it failed.
	DiscoverStatus_DISCOVER_STATUS_ERROR DiscoverStatus = 3
	// The user did not complete the action and left the wizard.
	DiscoverStatus_DISCOVER_STATUS_ABORTED DiscoverStatus = 4
)

// Enum value maps for DiscoverStatus.
var (
	DiscoverStatus_name = map[int32]string{
		0: "DISCOVER_STATUS_UNSPECIFIED",
		1: "DISCOVER_STATUS_SUCCESS",
		2: "DISCOVER_STATUS_SKIPPED",
		3: "DISCOVER_STATUS_ERROR",
		4: "DISCOVER_STATUS_ABORTED",
	}
	DiscoverStatus_value = map[string]int32{
		"DISCOVER_STATUS_UNSPECIFIED": 0,
		"DISCOVER_STATUS_SUCCESS":     1,
		"DISCOVER_STATUS_SKIPPED":     2,
		"DISCOVER_STATUS_ERROR":       3,
		"DISCOVER_STATUS_ABORTED":     4,
	}
)

func (x DiscoverStatus) Enum() *DiscoverStatus {
	p := new(DiscoverStatus)
	*p = x
	return p
}

func (x DiscoverStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_prehog_v1alpha_teleport_proto_enumTypes[2].Descriptor()
}

func (DiscoverStatus) Type() protoreflect.EnumType {
	return &file_prehog_v1alpha_teleport_proto_enumTypes[2]
}

func (x DiscoverStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverStatus.Descriptor instead.
func (DiscoverStatus) EnumDescriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{2}
}

type UserLoginEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// local/github/saml/oidc
	ConnectorType string `protobuf:"bytes,2,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	// The anonymized device ID, for logins where device trust is enabled.
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *UserLoginEvent) Reset() {
	*x = UserLoginEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginEvent) ProtoMessage() {}

func (x *UserLoginEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginEvent.ProtoReflect.Descriptor instead.
func (*UserLoginEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{0}
}

func (x *UserLoginEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserLoginEvent) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

func (x *UserLoginEvent) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type SSOCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// github/saml/oidc
	ConnectorType string `protobuf:"bytes,1,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
}

func (x *SSOCreateEvent) Reset() {
	*x = SSOCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSOCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSOCreateEvent) ProtoMessage() {}

func (x *SSOCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSOCreateEvent.ProtoReflect.Descriptor instead.
func (*SSOCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{1}
}

func (x *SSOCreateEvent) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

type ResourceCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(espadolini): is a resource the teleport process or the
	// databases/desktops/kube clusters accessed through it?
	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
}

func (x *ResourceCreateEvent) Reset() {
	*x = ResourceCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCreateEvent) ProtoMessage() {}

func (x *ResourceCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCreateEvent.ProtoReflect.Descriptor instead.
func (*ResourceCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceCreateEvent) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// a heartbeat for a resource served by a Teleport instance outside of the
// control plane (i.e. not auth, not proxy)
type ResourceHeartbeatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized, 32 bytes (HMAC-SHA-256)
	ResourceName []byte       `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceKind ResourceKind `protobuf:"varint,2,opt,name=resource_kind,json=resourceKind,proto3,enum=prehog.v1alpha.ResourceKind" json:"resource_kind,omitempty"`
	// true if the heartbeat has no expiration
	Static bool `protobuf:"varint,3,opt,name=static,proto3" json:"static,omitempty"`
}

func (x *ResourceHeartbeatEvent) Reset() {
	*x = ResourceHeartbeatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceHeartbeatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceHeartbeatEvent) ProtoMessage() {}

func (x *ResourceHeartbeatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceHeartbeatEvent.ProtoReflect.Descriptor instead.
func (*ResourceHeartbeatEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceHeartbeatEvent) GetResourceName() []byte {
	if x != nil {
		return x.ResourceName
	}
	return nil
}

func (x *ResourceHeartbeatEvent) GetResourceKind() ResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return ResourceKind_RESOURCE_KIND_UNSPECIFIED
}

func (x *ResourceHeartbeatEvent) GetStatic() bool {
	if x != nil {
		return x.Static
	}
	return false
}

type SessionStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// ssh/kube/desktop, maybe db?
	SessionType string `protobuf:"bytes,2,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
}

func (x *SessionStartEvent) Reset() {
	*x = SessionStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStartEvent) ProtoMessage() {}

func (x *SessionStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStartEvent.ProtoReflect.Descriptor instead.
func (*SessionStartEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{4}
}

func (x *SessionStartEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SessionStartEvent) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

type UserCertificateIssuedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The anonymized username/principal of the entity that requested the
	// certificate.
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// The issued certificate TTL.
	Ttl *durationpb.Duration `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// If true, the certificate was requested by a bot (i.e. Machine ID) user.
	IsBot bool `protobuf:"varint,3,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	// If true, the certificate usage is restricted to database access.
	UsageDatabase bool `protobuf:"varint,4,opt,name=usage_database,json=usageDatabase,proto3" json:"usage_database,omitempty"`
	// If true, the certificate usage is restricted to app access.
	UsageApp bool `protobuf:"varint,5,opt,name=usage_app,json=usageApp,proto3" json:"usage_app,omitempty"`
	// If true, the certificate usage is restricted to Kubernetes access.
	UsageKubernetes bool `protobuf:"varint,6,opt,name=usage_kubernetes,json=usageKubernetes,proto3" json:"usage_kubernetes,omitempty"`
	// If true, the certificate usage is restricted to desktop access.
	UsageDesktop bool `protobuf:"varint,7,opt,name=usage_desktop,json=usageDesktop,proto3" json:"usage_desktop,omitempty"`
}

func (x *UserCertificateIssuedEvent) Reset() {
	*x = UserCertificateIssuedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCertificateIssuedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCertificateIssuedEvent) ProtoMessage() {}

func (x *UserCertificateIssuedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCertificateIssuedEvent.ProtoReflect.Descriptor instead.
func (*UserCertificateIssuedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{5}
}

func (x *UserCertificateIssuedEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserCertificateIssuedEvent) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *UserCertificateIssuedEvent) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageDatabase() bool {
	if x != nil {
		return x.UsageDatabase
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageApp() bool {
	if x != nil {
		return x.UsageApp
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageKubernetes() bool {
	if x != nil {
		return x.UsageKubernetes
	}
	return false
}

func (x *UserCertificateIssuedEvent) GetUsageDesktop() bool {
	if x != nil {
		return x.UsageDesktop
	}
	return false
}

type UIBannerClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// cluster alert name
	Alert string `protobuf:"bytes,2,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *UIBannerClickEvent) Reset() {
	*x = UIBannerClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIBannerClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIBannerClickEvent) ProtoMessage() {}

func (x *UIBannerClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIBannerClickEvent.ProtoReflect.Descriptor instead.
func (*UIBannerClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{6}
}

func (x *UIBannerClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UIBannerClickEvent) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

type UIOnboardCompleteGoToDashboardClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardCompleteGoToDashboardClickEvent) Reset() {
	*x = UIOnboardCompleteGoToDashboardClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardCompleteGoToDashboardClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardCompleteGoToDashboardClickEvent) ProtoMessage() {}

func (x *UIOnboardCompleteGoToDashboardClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardCompleteGoToDashboardClickEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardCompleteGoToDashboardClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{7}
}

func (x *UIOnboardCompleteGoToDashboardClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UIOnboardAddFirstResourceClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardAddFirstResourceClickEvent) Reset() {
	*x = UIOnboardAddFirstResourceClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardAddFirstResourceClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardAddFirstResourceClickEvent) ProtoMessage() {}

func (x *UIOnboardAddFirstResourceClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardAddFirstResourceClickEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardAddFirstResourceClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{8}
}

func (x *UIOnboardAddFirstResourceClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UIOnboardAddFirstResourceLaterClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardAddFirstResourceLaterClickEvent) Reset() {
	*x = UIOnboardAddFirstResourceLaterClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardAddFirstResourceLaterClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardAddFirstResourceLaterClickEvent) ProtoMessage() {}

func (x *UIOnboardAddFirstResourceLaterClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardAddFirstResourceLaterClickEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardAddFirstResourceLaterClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{9}
}

func (x *UIOnboardAddFirstResourceLaterClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UIOnboardSetCredentialSubmitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIOnboardSetCredentialSubmitEvent) Reset() {
	*x = UIOnboardSetCredentialSubmitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardSetCredentialSubmitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardSetCredentialSubmitEvent) ProtoMessage() {}

func (x *UIOnboardSetCredentialSubmitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardSetCredentialSubmitEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardSetCredentialSubmitEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{10}
}

func (x *UIOnboardSetCredentialSubmitEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UIOnboardRegisterChallengeSubmitEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName  string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	MfaType   string `protobuf:"bytes,2,opt,name=mfa_type,json=mfaType,proto3" json:"mfa_type,omitempty"`
	LoginFlow string `protobuf:"bytes,3,opt,name=login_flow,json=loginFlow,proto3" json:"login_flow,omitempty"`
}

func (x *UIOnboardRegisterChallengeSubmitEvent) Reset() {
	*x = UIOnboardRegisterChallengeSubmitEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIOnboardRegisterChallengeSubmitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIOnboardRegisterChallengeSubmitEvent) ProtoMessage() {}

func (x *UIOnboardRegisterChallengeSubmitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIOnboardRegisterChallengeSubmitEvent.ProtoReflect.Descriptor instead.
func (*UIOnboardRegisterChallengeSubmitEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{11}
}

func (x *UIOnboardRegisterChallengeSubmitEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UIOnboardRegisterChallengeSubmitEvent) GetMfaType() string {
	if x != nil {
		return x.MfaType
	}
	return ""
}

func (x *UIOnboardRegisterChallengeSubmitEvent) GetLoginFlow() string {
	if x != nil {
		return x.LoginFlow
	}
	return ""
}

type UIRecoveryCodesContinueClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIRecoveryCodesContinueClickEvent) Reset() {
	*x = UIRecoveryCodesContinueClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIRecoveryCodesContinueClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIRecoveryCodesContinueClickEvent) ProtoMessage() {}

func (x *UIRecoveryCodesContinueClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIRecoveryCodesContinueClickEvent.ProtoReflect.Descriptor instead.
func (*UIRecoveryCodesContinueClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{12}
}

func (x *UIRecoveryCodesContinueClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UIRecoveryCodesCopyClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIRecoveryCodesCopyClickEvent) Reset() {
	*x = UIRecoveryCodesCopyClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIRecoveryCodesCopyClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIRecoveryCodesCopyClickEvent) ProtoMessage() {}

func (x *UIRecoveryCodesCopyClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIRecoveryCodesCopyClickEvent.ProtoReflect.Descriptor instead.
func (*UIRecoveryCodesCopyClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{13}
}

func (x *UIRecoveryCodesCopyClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UIRecoveryCodesPrintClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UIRecoveryCodesPrintClickEvent) Reset() {
	*x = UIRecoveryCodesPrintClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIRecoveryCodesPrintClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIRecoveryCodesPrintClickEvent) ProtoMessage() {}

func (x *UIRecoveryCodesPrintClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIRecoveryCodesPrintClickEvent.ProtoReflect.Descriptor instead.
func (*UIRecoveryCodesPrintClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{14}
}

func (x *UIRecoveryCodesPrintClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// DiscoverMetadata contains common metadata for Discover related events.
type DiscoverMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identifies Discover wizard "session". Will allow to correlate
	// events within the same Discover wizard run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// anonymized
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *DiscoverMetadata) Reset() {
	*x = DiscoverMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverMetadata) ProtoMessage() {}

func (x *DiscoverMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverMetadata.ProtoReflect.Descriptor instead.
func (*DiscoverMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{15}
}

func (x *DiscoverMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiscoverMetadata) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// DiscoverResourceMetadata contains common metadata identifying resource type being added.
type DiscoverResourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource type that is being added.
	Resource DiscoverResource `protobuf:"varint,1,opt,name=resource,proto3,enum=prehog.v1alpha.DiscoverResource" json:"resource,omitempty"`
}

func (x *DiscoverResourceMetadata) Reset() {
	*x = DiscoverResourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverResourceMetadata) ProtoMessage() {}

func (x *DiscoverResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverResourceMetadata.ProtoReflect.Descriptor instead.
func (*DiscoverResourceMetadata) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{16}
}

func (x *DiscoverResourceMetadata) GetResource() DiscoverResource {
	if x != nil {
		return x.Resource
	}
	return DiscoverResource_DISCOVER_RESOURCE_UNSPECIFIED
}

// DiscoverStepStatus contains fields that track a particular step outcome,
// for example connection test failed or succeeded, or user aborted the step.
type DiscoverStepStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the step outcome.
	Status DiscoverStatus `protobuf:"varint,1,opt,name=status,proto3,enum=prehog.v1alpha.DiscoverStatus" json:"status,omitempty"`
	// Contains error details in case of Error Status.
	// We have to be careful to not include any identifyable infomation like server addresses here.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DiscoverStepStatus) Reset() {
	*x = DiscoverStepStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverStepStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverStepStatus) ProtoMessage() {}

func (x *DiscoverStepStatus) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverStepStatus.ProtoReflect.Descriptor instead.
func (*DiscoverStepStatus) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{17}
}

func (x *DiscoverStepStatus) GetStatus() DiscoverStatus {
	if x != nil {
		return x.Status
	}
	return DiscoverStatus_DISCOVER_STATUS_UNSPECIFIED
}

func (x *DiscoverStepStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// UIDiscoverStartedEvent is emitted when the wizard opens.
type UIDiscoverStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Status   *DiscoverStepStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverStartedEvent) Reset() {
	*x = UIDiscoverStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverStartedEvent) ProtoMessage() {}

func (x *UIDiscoverStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverStartedEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverStartedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{18}
}

func (x *UIDiscoverStartedEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverStartedEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
// and proceeded to the next step.
type UIDiscoverResourceSelectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverResourceSelectionEvent) Reset() {
	*x = UIDiscoverResourceSelectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverResourceSelectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverResourceSelectionEvent) ProtoMessage() {}

func (x *UIDiscoverResourceSelectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverResourceSelectionEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverResourceSelectionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{19}
}

func (x *UIDiscoverResourceSelectionEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverResourceSelectionEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverResourceSelectionEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
// For SSH this is the Teleport 'install-node' script.
//
// For Kubernetes this is the teleport-agent helm chart installation.
//
// For Database Access this step is the installation of the teleport 'install-db' script.
// It can be skipped if the cluster already has a Database Service capable of proxying the database.
type UIDiscoverDeployServiceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDeployServiceEvent) Reset() {
	*x = UIDiscoverDeployServiceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDeployServiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDeployServiceEvent) ProtoMessage() {}

func (x *UIDiscoverDeployServiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDeployServiceEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDeployServiceEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{20}
}

func (x *UIDiscoverDeployServiceEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDeployServiceEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDeployServiceEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
type UIDiscoverDatabaseRegisterEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDatabaseRegisterEvent) Reset() {
	*x = UIDiscoverDatabaseRegisterEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDatabaseRegisterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDatabaseRegisterEvent) ProtoMessage() {}

func (x *UIDiscoverDatabaseRegisterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDatabaseRegisterEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDatabaseRegisterEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{21}
}

func (x *UIDiscoverDatabaseRegisterEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDatabaseRegisterEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDatabaseRegisterEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
type UIDiscoverDatabaseConfigureMTLSEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) Reset() {
	*x = UIDiscoverDatabaseConfigureMTLSEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDatabaseConfigureMTLSEvent) ProtoMessage() {}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDatabaseConfigureMTLSEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDatabaseConfigureMTLSEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{22}
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureMTLSEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
type UIDiscoverDesktopActiveDirectoryToolsInstallEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) Reset() {
	*x = UIDiscoverDesktopActiveDirectoryToolsInstallEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDesktopActiveDirectoryToolsInstallEvent) ProtoMessage() {}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDesktopActiveDirectoryToolsInstallEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDesktopActiveDirectoryToolsInstallEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{23}
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryToolsInstallEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
type UIDiscoverDesktopActiveDirectoryConfigureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) Reset() {
	*x = UIDiscoverDesktopActiveDirectoryConfigureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDesktopActiveDirectoryConfigureEvent) ProtoMessage() {}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDesktopActiveDirectoryConfigureEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDesktopActiveDirectoryConfigureEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{24}
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDesktopActiveDirectoryConfigureEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
// resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
type UIDiscoverAutoDiscoveredResourcesEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource       *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status         *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ResourcesCount int64                     `protobuf:"varint,4,opt,name=resources_count,json=resourcesCount,proto3" json:"resources_count,omitempty"`
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) Reset() {
	*x = UIDiscoverAutoDiscoveredResourcesEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverAutoDiscoveredResourcesEvent) ProtoMessage() {}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverAutoDiscoveredResourcesEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverAutoDiscoveredResourcesEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{25}
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UIDiscoverAutoDiscoveredResourcesEvent) GetResourcesCount() int64 {
	if x != nil {
		return x.ResourcesCount
	}
	return 0
}

// UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
type UIDiscoverDatabaseConfigureIAMPolicyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) Reset() {
	*x = UIDiscoverDatabaseConfigureIAMPolicyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverDatabaseConfigureIAMPolicyEvent) ProtoMessage() {}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverDatabaseConfigureIAMPolicyEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverDatabaseConfigureIAMPolicyEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{26}
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverDatabaseConfigureIAMPolicyEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
type UIDiscoverPrincipalsConfigureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverPrincipalsConfigureEvent) Reset() {
	*x = UIDiscoverPrincipalsConfigureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverPrincipalsConfigureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverPrincipalsConfigureEvent) ProtoMessage() {}

func (x *UIDiscoverPrincipalsConfigureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverPrincipalsConfigureEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverPrincipalsConfigureEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{27}
}

func (x *UIDiscoverPrincipalsConfigureEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverPrincipalsConfigureEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverPrincipalsConfigureEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
// when the user clicked tested connection to their resource.
type UIDiscoverTestConnectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverTestConnectionEvent) Reset() {
	*x = UIDiscoverTestConnectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverTestConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverTestConnectionEvent) ProtoMessage() {}

func (x *UIDiscoverTestConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverTestConnectionEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverTestConnectionEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{28}
}

func (x *UIDiscoverTestConnectionEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverTestConnectionEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverTestConnectionEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
type UIDiscoverCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DiscoverMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resource *DiscoverResourceMetadata `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Status   *DiscoverStepStatus       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UIDiscoverCompletedEvent) Reset() {
	*x = UIDiscoverCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDiscoverCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDiscoverCompletedEvent) ProtoMessage() {}

func (x *UIDiscoverCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDiscoverCompletedEvent.ProtoReflect.Descriptor instead.
func (*UIDiscoverCompletedEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{29}
}

func (x *UIDiscoverCompletedEvent) GetMetadata() *DiscoverMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UIDiscoverCompletedEvent) GetResource() *DiscoverResourceMetadata {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UIDiscoverCompletedEvent) GetStatus() *DiscoverStepStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// RoleCreateEvent is emitted when user creates a custom role.
type RoleCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// anonymized
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
}

func (x *RoleCreateEvent) Reset() {
	*x = RoleCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleCreateEvent) ProtoMessage() {}

func (x *RoleCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleCreateEvent.ProtoReflect.Descriptor instead.
func (*RoleCreateEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{30}
}

func (x *RoleCreateEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RoleCreateEvent) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

type UICreateNewRoleClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleClickEvent) Reset() {
	*x = UICreateNewRoleClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{31}
}

func (x *UICreateNewRoleClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UICreateNewRoleSaveClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleSaveClickEvent) Reset() {
	*x = UICreateNewRoleSaveClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleSaveClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleSaveClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleSaveClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleSaveClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleSaveClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{32}
}

func (x *UICreateNewRoleSaveClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UICreateNewRoleCancelClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleCancelClickEvent) Reset() {
	*x = UICreateNewRoleCancelClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleCancelClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleCancelClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleCancelClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleCancelClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleCancelClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{33}
}

func (x *UICreateNewRoleCancelClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UICreateNewRoleViewDocumentationClickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UICreateNewRoleViewDocumentationClickEvent) Reset() {
	*x = UICreateNewRoleViewDocumentationClickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UICreateNewRoleViewDocumentationClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UICreateNewRoleViewDocumentationClickEvent) ProtoMessage() {}

func (x *UICreateNewRoleViewDocumentationClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UICreateNewRoleViewDocumentationClickEvent.ProtoReflect.Descriptor instead.
func (*UICreateNewRoleViewDocumentationClickEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{34}
}

func (x *UICreateNewRoleViewDocumentationClickEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type KubeRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *KubeRequestEvent) Reset() {
	*x = KubeRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeRequestEvent) ProtoMessage() {}

func (x *KubeRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeRequestEvent.ProtoReflect.Descriptor instead.
func (*KubeRequestEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{35}
}

func (x *KubeRequestEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type SFTPEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// matching SFTPAction in teleport/api/types/events/events.proto
	Action int32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *SFTPEvent) Reset() {
	*x = SFTPEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFTPEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFTPEvent) ProtoMessage() {}

func (x *SFTPEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFTPEvent.ProtoReflect.Descriptor instead.
func (*SFTPEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{36}
}

func (x *SFTPEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SFTPEvent) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type AgentMetadataEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	HostId                string   `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Services              []string `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	Os                    string   `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion             string   `protobuf:"bytes,5,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	HostArchitecture      string   `protobuf:"bytes,6,opt,name=host_architecture,json=hostArchitecture,proto3" json:"host_architecture,omitempty"`
	GlibcVersion          string   `protobuf:"bytes,7,opt,name=glibc_version,json=glibcVersion,proto3" json:"glibc_version,omitempty"`
	InstallMethods        []string `protobuf:"bytes,8,rep,name=install_methods,json=installMethods,proto3" json:"install_methods,omitempty"`
	ContainerRuntime      string   `protobuf:"bytes,9,opt,name=container_runtime,json=containerRuntime,proto3" json:"container_runtime,omitempty"`
	ContainerOrchestrator string   `protobuf:"bytes,10,opt,name=container_orchestrator,json=containerOrchestrator,proto3" json:"container_orchestrator,omitempty"`
	CloudEnvironment      string   `protobuf:"bytes,11,opt,name=cloud_environment,json=cloudEnvironment,proto3" json:"cloud_environment,omitempty"`
}

func (x *AgentMetadataEvent) Reset() {
	*x = AgentMetadataEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetadataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetadataEvent) ProtoMessage() {}

func (x *AgentMetadataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetadataEvent.ProtoReflect.Descriptor instead.
func (*AgentMetadataEvent) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{37}
}

func (x *AgentMetadataEvent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentMetadataEvent) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *AgentMetadataEvent) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *AgentMetadataEvent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AgentMetadataEvent) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *AgentMetadataEvent) GetHostArchitecture() string {
	if x != nil {
		return x.HostArchitecture
	}
	return ""
}

func (x *AgentMetadataEvent) GetGlibcVersion() string {
	if x != nil {
		return x.GlibcVersion
	}
	return ""
}

func (x *AgentMetadataEvent) GetInstallMethods() []string {
	if x != nil {
		return x.InstallMethods
	}
	return nil
}

func (x *AgentMetadataEvent) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *AgentMetadataEvent) GetContainerOrchestrator() string {
	if x != nil {
		return x.ContainerOrchestrator
	}
	return ""
}

func (x *AgentMetadataEvent) GetCloudEnvironment() string {
	if x != nil {
		return x.CloudEnvironment
	}
	return ""
}

type SubmitEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// anonymized
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// optional, will default to the ingest time if unset
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Event:
	//
	//	*SubmitEventRequest_UserLogin
	//	*SubmitEventRequest_SsoCreate
	//	*SubmitEventRequest_ResourceCreate
	//	*SubmitEventRequest_SessionStart
	//	*SubmitEventRequest_UiBannerClick
	//	*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick
	//	*SubmitEventRequest_UiOnboardAddFirstResourceClick
	//	*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick
	//	*SubmitEventRequest_UiOnboardSetCredentialSubmit
	//	*SubmitEventRequest_UiOnboardRegisterChallengeSubmit
	//	*SubmitEventRequest_UiRecoveryCodesContinueClick
	//	*SubmitEventRequest_UiRecoveryCodesCopyClick
	//	*SubmitEventRequest_UiRecoveryCodesPrintClick
	//	*SubmitEventRequest_UiDiscoverStartedEvent
	//	*SubmitEventRequest_UiDiscoverResourceSelectionEvent
	//	*SubmitEventRequest_UserCertificateIssuedEvent
	//	*SubmitEventRequest_SessionStartV2
	//	*SubmitEventRequest_UiDiscoverDeployServiceEvent
	//	*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent
	//	*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent
	//	*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent
	//	*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent
	//	*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent
	//	*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent
	//	*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent
	//	*SubmitEventRequest_UiDiscoverTestConnectionEvent
	//	*SubmitEventRequest_UiDiscoverCompletedEvent
	//	*SubmitEventRequest_RoleCreate
	//	*SubmitEventRequest_UiCreateNewRoleClick
	//	*SubmitEventRequest_UiCreateNewRoleSaveClick
	//	*SubmitEventRequest_UiCreateNewRoleCancelClick
	//	*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick
	//	*SubmitEventRequest_KubeRequest
	//	*SubmitEventRequest_Sftp
	//	*SubmitEventRequest_AgentMetadataEvent
	//	*SubmitEventRequest_ResourceHeartbeat
	Event isSubmitEventRequest_Event `protobuf_oneof:"event"`
}

func (x *SubmitEventRequest) Reset() {
	*x = SubmitEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventRequest) ProtoMessage() {}

func (x *SubmitEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventRequest.ProtoReflect.Descriptor instead.
func (*SubmitEventRequest) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{38}
}

func (x *SubmitEventRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SubmitEventRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *SubmitEventRequest) GetEvent() isSubmitEventRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SubmitEventRequest) GetUserLogin() *UserLoginEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UserLogin); ok {
		return x.UserLogin
	}
	return nil
}

func (x *SubmitEventRequest) GetSsoCreate() *SSOCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SsoCreate); ok {
		return x.SsoCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetResourceCreate() *ResourceCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_ResourceCreate); ok {
		return x.ResourceCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetSessionStart() *SessionStartEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SessionStart); ok {
		return x.SessionStart
	}
	return nil
}

func (x *SubmitEventRequest) GetUiBannerClick() *UIBannerClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiBannerClick); ok {
		return x.UiBannerClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardCompleteGoToDashboardClick() *UIOnboardCompleteGoToDashboardClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick); ok {
		return x.UiOnboardCompleteGoToDashboardClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardAddFirstResourceClick() *UIOnboardAddFirstResourceClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardAddFirstResourceClick); ok {
		return x.UiOnboardAddFirstResourceClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardAddFirstResourceLaterClick() *UIOnboardAddFirstResourceLaterClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick); ok {
		return x.UiOnboardAddFirstResourceLaterClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardSetCredentialSubmit() *UIOnboardSetCredentialSubmitEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardSetCredentialSubmit); ok {
		return x.UiOnboardSetCredentialSubmit
	}
	return nil
}

func (x *SubmitEventRequest) GetUiOnboardRegisterChallengeSubmit() *UIOnboardRegisterChallengeSubmitEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiOnboardRegisterChallengeSubmit); ok {
		return x.UiOnboardRegisterChallengeSubmit
	}
	return nil
}

func (x *SubmitEventRequest) GetUiRecoveryCodesContinueClick() *UIRecoveryCodesContinueClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiRecoveryCodesContinueClick); ok {
		return x.UiRecoveryCodesContinueClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiRecoveryCodesCopyClick() *UIRecoveryCodesCopyClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiRecoveryCodesCopyClick); ok {
		return x.UiRecoveryCodesCopyClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiRecoveryCodesPrintClick() *UIRecoveryCodesPrintClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiRecoveryCodesPrintClick); ok {
		return x.UiRecoveryCodesPrintClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverStartedEvent() *UIDiscoverStartedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverStartedEvent); ok {
		return x.UiDiscoverStartedEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverResourceSelectionEvent() *UIDiscoverResourceSelectionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverResourceSelectionEvent); ok {
		return x.UiDiscoverResourceSelectionEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUserCertificateIssuedEvent() *UserCertificateIssuedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UserCertificateIssuedEvent); ok {
		return x.UserCertificateIssuedEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetSessionStartV2() *SessionStartEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_SessionStartV2); ok {
		return x.SessionStartV2
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDeployServiceEvent() *UIDiscoverDeployServiceEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDeployServiceEvent); ok {
		return x.UiDiscoverDeployServiceEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDatabaseRegisterEvent() *UIDiscoverDatabaseRegisterEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent); ok {
		return x.UiDiscoverDatabaseRegisterEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDatabaseConfigureMtlsEvent() *UIDiscoverDatabaseConfigureMTLSEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent); ok {
		return x.UiDiscoverDatabaseConfigureMtlsEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDesktopActiveDirectoryToolsInstallEvent() *UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent); ok {
		return x.UiDiscoverDesktopActiveDirectoryToolsInstallEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDesktopActiveDirectoryConfigureEvent() *UIDiscoverDesktopActiveDirectoryConfigureEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent); ok {
		return x.UiDiscoverDesktopActiveDirectoryConfigureEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverAutoDiscoveredResourcesEvent() *UIDiscoverAutoDiscoveredResourcesEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent); ok {
		return x.UiDiscoverAutoDiscoveredResourcesEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverDatabaseConfigureIamPolicyEvent() *UIDiscoverDatabaseConfigureIAMPolicyEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent); ok {
		return x.UiDiscoverDatabaseConfigureIamPolicyEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverPrincipalsConfigureEvent() *UIDiscoverPrincipalsConfigureEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent); ok {
		return x.UiDiscoverPrincipalsConfigureEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverTestConnectionEvent() *UIDiscoverTestConnectionEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverTestConnectionEvent); ok {
		return x.UiDiscoverTestConnectionEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetUiDiscoverCompletedEvent() *UIDiscoverCompletedEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiDiscoverCompletedEvent); ok {
		return x.UiDiscoverCompletedEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetRoleCreate() *RoleCreateEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_RoleCreate); ok {
		return x.RoleCreate
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleClick() *UICreateNewRoleClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleClick); ok {
		return x.UiCreateNewRoleClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleSaveClick() *UICreateNewRoleSaveClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleSaveClick); ok {
		return x.UiCreateNewRoleSaveClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleCancelClick() *UICreateNewRoleCancelClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleCancelClick); ok {
		return x.UiCreateNewRoleCancelClick
	}
	return nil
}

func (x *SubmitEventRequest) GetUiCreateNewRoleViewDocumentationClick() *UICreateNewRoleViewDocumentationClickEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick); ok {
		return x.UiCreateNewRoleViewDocumentationClick
	}
	return nil
}

func (x *SubmitEventRequest) GetKubeRequest() *KubeRequestEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_KubeRequest); ok {
		return x.KubeRequest
	}
	return nil
}

func (x *SubmitEventRequest) GetSftp() *SFTPEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_Sftp); ok {
		return x.Sftp
	}
	return nil
}

func (x *SubmitEventRequest) GetAgentMetadataEvent() *AgentMetadataEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_AgentMetadataEvent); ok {
		return x.AgentMetadataEvent
	}
	return nil
}

func (x *SubmitEventRequest) GetResourceHeartbeat() *ResourceHeartbeatEvent {
	if x, ok := x.GetEvent().(*SubmitEventRequest_ResourceHeartbeat); ok {
		return x.ResourceHeartbeat
	}
	return nil
}

type isSubmitEventRequest_Event interface {
	isSubmitEventRequest_Event()
}

type SubmitEventRequest_UserLogin struct {
	UserLogin *UserLoginEvent `protobuf:"bytes,3,opt,name=user_login,json=userLogin,proto3,oneof"`
}

type SubmitEventRequest_SsoCreate struct {
	SsoCreate *SSOCreateEvent `protobuf:"bytes,4,opt,name=sso_create,json=ssoCreate,proto3,oneof"`
}

type SubmitEventRequest_ResourceCreate struct {
	ResourceCreate *ResourceCreateEvent `protobuf:"bytes,5,opt,name=resource_create,json=resourceCreate,proto3,oneof"`
}

type SubmitEventRequest_SessionStart struct {
	// REMOVE IN V14: Use session_start_v2 instead
	SessionStart *SessionStartEvent `protobuf:"bytes,6,opt,name=session_start,json=sessionStart,proto3,oneof"`
}

type SubmitEventRequest_UiBannerClick struct {
	UiBannerClick *UIBannerClickEvent `protobuf:"bytes,7,opt,name=ui_banner_click,json=uiBannerClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardCompleteGoToDashboardClick struct {
	UiOnboardCompleteGoToDashboardClick *UIOnboardCompleteGoToDashboardClickEvent `protobuf:"bytes,9,opt,name=ui_onboard_complete_go_to_dashboard_click,json=uiOnboardCompleteGoToDashboardClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardAddFirstResourceClick struct {
	UiOnboardAddFirstResourceClick *UIOnboardAddFirstResourceClickEvent `protobuf:"bytes,10,opt,name=ui_onboard_add_first_resource_click,json=uiOnboardAddFirstResourceClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardAddFirstResourceLaterClick struct {
	UiOnboardAddFirstResourceLaterClick *UIOnboardAddFirstResourceLaterClickEvent `protobuf:"bytes,11,opt,name=ui_onboard_add_first_resource_later_click,json=uiOnboardAddFirstResourceLaterClick,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardSetCredentialSubmit struct {
	UiOnboardSetCredentialSubmit *UIOnboardSetCredentialSubmitEvent `protobuf:"bytes,12,opt,name=ui_onboard_set_credential_submit,json=uiOnboardSetCredentialSubmit,proto3,oneof"`
}

type SubmitEventRequest_UiOnboardRegisterChallengeSubmit struct {
	UiOnboardRegisterChallengeSubmit *UIOnboardRegisterChallengeSubmitEvent `protobuf:"bytes,13,opt,name=ui_onboard_register_challenge_submit,json=uiOnboardRegisterChallengeSubmit,proto3,oneof"`
}

type SubmitEventRequest_UiRecoveryCodesContinueClick struct {
	UiRecoveryCodesContinueClick *UIRecoveryCodesContinueClickEvent `protobuf:"bytes,14,opt,name=ui_recovery_codes_continue_click,json=uiRecoveryCodesContinueClick,proto3,oneof"`
}

type SubmitEventRequest_UiRecoveryCodesCopyClick struct {
	UiRecoveryCodesCopyClick *UIRecoveryCodesCopyClickEvent `protobuf:"bytes,15,opt,name=ui_recovery_codes_copy_click,json=uiRecoveryCodesCopyClick,proto3,oneof"`
}

type SubmitEventRequest_UiRecoveryCodesPrintClick struct {
	UiRecoveryCodesPrintClick *UIRecoveryCodesPrintClickEvent `protobuf:"bytes,16,opt,name=ui_recovery_codes_print_click,json=uiRecoveryCodesPrintClick,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverStartedEvent struct {
	UiDiscoverStartedEvent *UIDiscoverStartedEvent `protobuf:"bytes,17,opt,name=ui_discover_started_event,json=uiDiscoverStartedEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverResourceSelectionEvent struct {
	UiDiscoverResourceSelectionEvent *UIDiscoverResourceSelectionEvent `protobuf:"bytes,18,opt,name=ui_discover_resource_selection_event,json=uiDiscoverResourceSelectionEvent,proto3,oneof"`
}

type SubmitEventRequest_UserCertificateIssuedEvent struct {
	UserCertificateIssuedEvent *UserCertificateIssuedEvent `protobuf:"bytes,19,opt,name=user_certificate_issued_event,json=userCertificateIssuedEvent,proto3,oneof"`
}

type SubmitEventRequest_SessionStartV2 struct {
	// Note: semantics of SessionStartEvent type values have changed to
	// differentiate SSH from Kubernetes exec sessions (as well as adding
	// db/app/desktop events). The structures are the same, however, so we don't
	// need a new message type.
	SessionStartV2 *SessionStartEvent `protobuf:"bytes,20,opt,name=session_start_v2,json=sessionStartV2,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDeployServiceEvent struct {
	UiDiscoverDeployServiceEvent *UIDiscoverDeployServiceEvent `protobuf:"bytes,21,opt,name=ui_discover_deploy_service_event,json=uiDiscoverDeployServiceEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDatabaseRegisterEvent struct {
	UiDiscoverDatabaseRegisterEvent *UIDiscoverDatabaseRegisterEvent `protobuf:"bytes,22,opt,name=ui_discover_database_register_event,json=uiDiscoverDatabaseRegisterEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent struct {
	UiDiscoverDatabaseConfigureMtlsEvent *UIDiscoverDatabaseConfigureMTLSEvent `protobuf:"bytes,23,opt,name=ui_discover_database_configure_mtls_event,json=uiDiscoverDatabaseConfigureMtlsEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent struct {
	UiDiscoverDesktopActiveDirectoryToolsInstallEvent *UIDiscoverDesktopActiveDirectoryToolsInstallEvent `protobuf:"bytes,24,opt,name=ui_discover_desktop_active_directory_tools_install_event,json=uiDiscoverDesktopActiveDirectoryToolsInstallEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent struct {
	UiDiscoverDesktopActiveDirectoryConfigureEvent *UIDiscoverDesktopActiveDirectoryConfigureEvent `protobuf:"bytes,25,opt,name=ui_discover_desktop_active_directory_configure_event,json=uiDiscoverDesktopActiveDirectoryConfigureEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent struct {
	UiDiscoverAutoDiscoveredResourcesEvent *UIDiscoverAutoDiscoveredResourcesEvent `protobuf:"bytes,26,opt,name=ui_discover_auto_discovered_resources_event,json=uiDiscoverAutoDiscoveredResourcesEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent struct {
	UiDiscoverDatabaseConfigureIamPolicyEvent *UIDiscoverDatabaseConfigureIAMPolicyEvent `protobuf:"bytes,27,opt,name=ui_discover_database_configure_iam_policy_event,json=uiDiscoverDatabaseConfigureIamPolicyEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent struct {
	UiDiscoverPrincipalsConfigureEvent *UIDiscoverPrincipalsConfigureEvent `protobuf:"bytes,28,opt,name=ui_discover_principals_configure_event,json=uiDiscoverPrincipalsConfigureEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverTestConnectionEvent struct {
	UiDiscoverTestConnectionEvent *UIDiscoverTestConnectionEvent `protobuf:"bytes,29,opt,name=ui_discover_test_connection_event,json=uiDiscoverTestConnectionEvent,proto3,oneof"`
}

type SubmitEventRequest_UiDiscoverCompletedEvent struct {
	UiDiscoverCompletedEvent *UIDiscoverCompletedEvent `protobuf:"bytes,30,opt,name=ui_discover_completed_event,json=uiDiscoverCompletedEvent,proto3,oneof"`
}

type SubmitEventRequest_RoleCreate struct {
	RoleCreate *RoleCreateEvent `protobuf:"bytes,31,opt,name=role_create,json=roleCreate,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleClick struct {
	UiCreateNewRoleClick *UICreateNewRoleClickEvent `protobuf:"bytes,32,opt,name=ui_create_new_role_click,json=uiCreateNewRoleClick,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleSaveClick struct {
	UiCreateNewRoleSaveClick *UICreateNewRoleSaveClickEvent `protobuf:"bytes,33,opt,name=ui_create_new_role_save_click,json=uiCreateNewRoleSaveClick,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleCancelClick struct {
	UiCreateNewRoleCancelClick *UICreateNewRoleCancelClickEvent `protobuf:"bytes,34,opt,name=ui_create_new_role_cancel_click,json=uiCreateNewRoleCancelClick,proto3,oneof"`
}

type SubmitEventRequest_UiCreateNewRoleViewDocumentationClick struct {
	UiCreateNewRoleViewDocumentationClick *UICreateNewRoleViewDocumentationClickEvent `protobuf:"bytes,35,opt,name=ui_create_new_role_view_documentation_click,json=uiCreateNewRoleViewDocumentationClick,proto3,oneof"`
}

type SubmitEventRequest_KubeRequest struct {
	KubeRequest *KubeRequestEvent `protobuf:"bytes,36,opt,name=kube_request,json=kubeRequest,proto3,oneof"`
}

type SubmitEventRequest_Sftp struct {
	Sftp *SFTPEvent `protobuf:"bytes,37,opt,name=sftp,proto3,oneof"`
}

type SubmitEventRequest_AgentMetadataEvent struct {
	AgentMetadataEvent *AgentMetadataEvent `protobuf:"bytes,38,opt,name=agent_metadata_event,json=agentMetadataEvent,proto3,oneof"`
}

type SubmitEventRequest_ResourceHeartbeat struct {
	ResourceHeartbeat *ResourceHeartbeatEvent `protobuf:"bytes,39,opt,name=resource_heartbeat,json=resourceHeartbeat,proto3,oneof"`
}

func (*SubmitEventRequest_UserLogin) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SsoCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_ResourceCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SessionStart) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiBannerClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardAddFirstResourceClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardSetCredentialSubmit) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiOnboardRegisterChallengeSubmit) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiRecoveryCodesContinueClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiRecoveryCodesCopyClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiRecoveryCodesPrintClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverStartedEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverResourceSelectionEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UserCertificateIssuedEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_SessionStartV2) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDeployServiceEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent) isSubmitEventRequest_Event() {
}

func (*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent) isSubmitEventRequest_Event() {
}

func (*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverTestConnectionEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiDiscoverCompletedEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_RoleCreate) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleSaveClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleCancelClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_KubeRequest) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_Sftp) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_AgentMetadataEvent) isSubmitEventRequest_Event() {}

func (*SubmitEventRequest_ResourceHeartbeat) isSubmitEventRequest_Event() {}

type SubmitEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitEventResponse) Reset() {
	*x = SubmitEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventResponse) ProtoMessage() {}

func (x *SubmitEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventResponse.ProtoReflect.Descriptor instead.
func (*SubmitEventResponse) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{39}
}

type SubmitEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*SubmitEventRequest `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *SubmitEventsRequest) Reset() {
	*x = SubmitEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventsRequest) ProtoMessage() {}

func (x *SubmitEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventsRequest.ProtoReflect.Descriptor instead.
func (*SubmitEventsRequest) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{40}
}

func (x *SubmitEventsRequest) GetEvents() []*SubmitEventRequest {
	if x != nil {
		return x.Events
	}
	return nil
}

type SubmitEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitEventsResponse) Reset() {
	*x = SubmitEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventsResponse) ProtoMessage() {}

func (x *SubmitEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventsResponse.ProtoReflect.Descriptor instead.
func (*SubmitEventsResponse) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{41}
}

type HelloTeleportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HelloTeleportRequest) Reset() {
	*x = HelloTeleportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloTeleportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloTeleportRequest) ProtoMessage() {}

func (x *HelloTeleportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloTeleportRequest.ProtoReflect.Descriptor instead.
func (*HelloTeleportRequest) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{42}
}

type HelloTeleportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HelloTeleportResponse) Reset() {
	*x = HelloTeleportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prehog_v1alpha_teleport_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloTeleportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloTeleportResponse) ProtoMessage() {}

func (x *HelloTeleportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prehog_v1alpha_teleport_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloTeleportResponse.ProtoReflect.Descriptor instead.
func (*HelloTeleportResponse) Descriptor() ([]byte, []int) {
	return file_prehog_v1alpha_teleport_proto_rawDescGZIP(), []int{43}
}

var File_prehog_v1alpha_teleport_proto protoreflect.FileDescriptor

var file_prehog_v1alpha_teleport_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x71, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0e, 0x53, 0x53, 0x4f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x12, 0x29, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x22, 0x47, 0x0a, 0x12,
	0x55, 0x49, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x47, 0x0a, 0x28, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x54, 0x6f, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42,
	0x0a, 0x23, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x47, 0x0a, 0x28, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41,
	0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x21, 0x55,
	0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a,
	0x25, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x66, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x66, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x40, 0x0a,
	0x21, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x3c, 0x0a, 0x1d, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a,
	0x1e, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x10,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a,
	0x18, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x16,
	0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe2, 0x01, 0x0a, 0x20, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x1f, 0x55, 0x49, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x24, 0x55,
	0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d, 0x54, 0x4c, 0x53, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x31, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x2e, 0x55, 0x49,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x02, 0x0a,
	0x26, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xeb, 0x01, 0x0a, 0x29, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe4,
	0x01, 0x0a, 0x22, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1d, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x55, 0x49, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x38, 0x0a, 0x19, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x1d, 0x55,
	0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x61,
	0x76, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x1f, 0x55, 0x49, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x2a, 0x55, 0x49, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x09, 0x53, 0x46, 0x54, 0x50, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x03, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6c, 0x69,
	0x62, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x6c, 0x69, 0x62, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc3, 0x21, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x73, 0x73, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x53, 0x4f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x73, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x4e,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x48,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x49, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x69, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x92, 0x01, 0x0a, 0x29, 0x75, 0x69, 0x5f, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67,
	0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x54,
	0x6f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x23, 0x75, 0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x54, 0x6f, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x82, 0x01, 0x0a, 0x23,
	0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1e, 0x75, 0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x12, 0x92, 0x01, 0x0a, 0x29, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41,
	0x64, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x23, 0x75, 0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x7b, 0x0a, 0x20, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x69, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x49, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20, 0x75, 0x69, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x7b, 0x0a, 0x20,
	0x75, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x69, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x6f, 0x0a, 0x1c, 0x75, 0x69, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x70, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x75, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x72, 0x0a, 0x1d, 0x75, 0x69,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x19, 0x75, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x63,
	0x0a, 0x19, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x75, 0x69, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x24, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x32, 0x12, 0x76, 0x0a, 0x20, 0x75, 0x69, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x1c, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x7f, 0x0a, 0x23, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1f, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x8f, 0x01, 0x0a, 0x29, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x4d, 0x54, 0x4c, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x24, 0x75,
	0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d, 0x74, 0x6c, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0xb8, 0x01, 0x0a, 0x38, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x31, 0x75, 0x69, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xae,
	0x01, 0x0a, 0x34, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x2e, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x95, 0x01, 0x0a, 0x2b, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x26, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x2f, 0x75, 0x69, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x41,
	0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x29,
	0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x26, 0x75, 0x69,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x22, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x21, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1d, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x69, 0x0a, 0x1b, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x75, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x63,
	0x0a, 0x18, 0x75, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x75,
	0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x1d, 0x75, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x65,
	0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x75, 0x69, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x76, 0x0a, 0x1f, 0x75, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x1a, 0x75, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x98, 0x01,
	0x0a, 0x2b, 0x75, 0x69, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x52, 0x6f, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x25, 0x75, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x6f,
	0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x73, 0x66, 0x74, 0x70, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x46, 0x54, 0x50, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x66, 0x74, 0x70,
	0x12, 0x56, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x52, 0x1c, 0x75, 0x69, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x22, 0x15,
	0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0xe2, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44, 0x45, 0x53,
	0x4b, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x53, 0x53, 0x48, 0x10, 0x06, 0x2a, 0xaa, 0x06, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x33,
	0x0a, 0x2f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53,
	0x5f, 0x52, 0x44, 0x53, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x52, 0x44, 0x53, 0x10, 0x07,
	0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x09, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44, 0x45, 0x53,
	0x4b, 0x54, 0x4f, 0x50, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x44, 0x53, 0x10, 0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x44, 0x53,
	0x48, 0x49, 0x46, 0x54, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x2b,
	0x0a, 0x27, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x0f, 0x12, 0x28, 0x0a, 0x24, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f,
	0x47, 0x43, 0x50, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x43,
	0x50, 0x10, 0x11, 0x2a, 0xa3, 0x01, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0xb4, 0x02, 0x0a, 0x18, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x68,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x12, 0x5b, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x65, 0x68, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prehog_v1alpha_teleport_proto_rawDescOnce sync.Once
	file_prehog_v1alpha_teleport_proto_rawDescData = file_prehog_v1alpha_teleport_proto_rawDesc
)

func file_prehog_v1alpha_teleport_proto_rawDescGZIP() []byte {
	file_prehog_v1alpha_teleport_proto_rawDescOnce.Do(func() {
		file_prehog_v1alpha_teleport_proto_rawDescData = protoimpl.X.CompressGZIP(file_prehog_v1alpha_teleport_proto_rawDescData)
	})
	return file_prehog_v1alpha_teleport_proto_rawDescData
}

var file_prehog_v1alpha_teleport_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_prehog_v1alpha_teleport_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_prehog_v1alpha_teleport_proto_goTypes = []interface{}{
	(ResourceKind)(0),                                         // 0: prehog.v1alpha.ResourceKind
	(DiscoverResource)(0),                                     // 1: prehog.v1alpha.DiscoverResource
	(DiscoverStatus)(0),                                       // 2: prehog.v1alpha.DiscoverStatus
	(*UserLoginEvent)(nil),                                    // 3: prehog.v1alpha.UserLoginEvent
	(*SSOCreateEvent)(nil),                                    // 4: prehog.v1alpha.SSOCreateEvent
	(*ResourceCreateEvent)(nil),                               // 5: prehog.v1alpha.ResourceCreateEvent
	(*ResourceHeartbeatEvent)(nil),                            // 6: prehog.v1alpha.ResourceHeartbeatEvent
	(*SessionStartEvent)(nil),                                 // 7: prehog.v1alpha.SessionStartEvent
	(*UserCertificateIssuedEvent)(nil),                        // 8: prehog.v1alpha.UserCertificateIssuedEvent
	(*UIBannerClickEvent)(nil),                                // 9: prehog.v1alpha.UIBannerClickEvent
	(*UIOnboardCompleteGoToDashboardClickEvent)(nil),          // 10: prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
	(*UIOnboardAddFirstResourceClickEvent)(nil),               // 11: prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
	(*UIOnboardAddFirstResourceLaterClickEvent)(nil),          // 12: prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
	(*UIOnboardSetCredentialSubmitEvent)(nil),                 // 13: prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
	(*UIOnboardRegisterChallengeSubmitEvent)(nil),             // 14: prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
	(*UIRecoveryCodesContinueClickEvent)(nil),                 // 15: prehog.v1alpha.UIRecoveryCodesContinueClickEvent
	(*UIRecoveryCodesCopyClickEvent)(nil),                     // 16: prehog.v1alpha.UIRecoveryCodesCopyClickEvent
	(*UIRecoveryCodesPrintClickEvent)(nil),                    // 17: prehog.v1alpha.UIRecoveryCodesPrintClickEvent
	(*DiscoverMetadata)(nil),                                  // 18: prehog.v1alpha.DiscoverMetadata
	(*DiscoverResourceMetadata)(nil),                          // 19: prehog.v1alpha.DiscoverResourceMetadata
	(*DiscoverStepStatus)(nil),                                // 20: prehog.v1alpha.DiscoverStepStatus
	(*UIDiscoverStartedEvent)(nil),                            // 21: prehog.v1alpha.UIDiscoverStartedEvent
	(*UIDiscoverResourceSelectionEvent)(nil),                  // 22: prehog.v1alpha.UIDiscoverResourceSelectionEvent
	(*UIDiscoverDeployServiceEvent)(nil),                      // 23: prehog.v1alpha.UIDiscoverDeployServiceEvent
	(*UIDiscoverDatabaseRegisterEvent)(nil),                   // 24: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
	(*UIDiscoverDatabaseConfigureMTLSEvent)(nil),              // 25: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
	(*UIDiscoverDesktopActiveDirectoryToolsInstallEvent)(nil), // 26: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
	(*UIDiscoverDesktopActiveDirectoryConfigureEvent)(nil),    // 27: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
	(*UIDiscoverAutoDiscoveredResourcesEvent)(nil),            // 28: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
	(*UIDiscoverDatabaseConfigureIAMPolicyEvent)(nil),         // 29: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
	(*UIDiscoverPrincipalsConfigureEvent)(nil),                // 30: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
	(*UIDiscoverTestConnectionEvent)(nil),                     // 31: prehog.v1alpha.UIDiscoverTestConnectionEvent
	(*UIDiscoverCompletedEvent)(nil),                          // 32: prehog.v1alpha.UIDiscoverCompletedEvent
	(*RoleCreateEvent)(nil),                                   // 33: prehog.v1alpha.RoleCreateEvent
	(*UICreateNewRoleClickEvent)(nil),                         // 34: prehog.v1alpha.UICreateNewRoleClickEvent
	(*UICreateNewRoleSaveClickEvent)(nil),                     // 35: prehog.v1alpha.UICreateNewRoleSaveClickEvent
	(*UICreateNewRoleCancelClickEvent)(nil),                   // 36: prehog.v1alpha.UICreateNewRoleCancelClickEvent
	(*UICreateNewRoleViewDocumentationClickEvent)(nil),        // 37: prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
	(*KubeRequestEvent)(nil),                                  // 38: prehog.v1alpha.KubeRequestEvent
	(*SFTPEvent)(nil),                                         // 39: prehog.v1alpha.SFTPEvent
	(*AgentMetadataEvent)(nil),                                // 40: prehog.v1alpha.AgentMetadataEvent
	(*SubmitEventRequest)(nil),                                // 41: prehog.v1alpha.SubmitEventRequest
	(*SubmitEventResponse)(nil),                               // 42: prehog.v1alpha.SubmitEventResponse
	(*SubmitEventsRequest)(nil),                               // 43: prehog.v1alpha.SubmitEventsRequest
	(*SubmitEventsResponse)(nil),                              // 44: prehog.v1alpha.SubmitEventsResponse
	(*HelloTeleportRequest)(nil),                              // 45: prehog.v1alpha.HelloTeleportRequest
	(*HelloTeleportResponse)(nil),                             // 46: prehog.v1alpha.HelloTeleportResponse
	(*durationpb.Duration)(nil),                               // 47: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                             // 48: google.protobuf.Timestamp
}
var file_prehog_v1alpha_teleport_proto_depIdxs = []int32{
	0,  // 0: prehog.v1alpha.ResourceHeartbeatEvent.resource_kind:type_name -> prehog.v1alpha.ResourceKind
	47, // 1: prehog.v1alpha.UserCertificateIssuedEvent.ttl:type_name -> google.protobuf.Duration
	1,  // 2: prehog.v1alpha.DiscoverResourceMetadata.resource:type_name -> prehog.v1alpha.DiscoverResource
	2,  // 3: prehog.v1alpha.DiscoverStepStatus.status:type_name -> prehog.v1alpha.DiscoverStatus
	18, // 4: prehog.v1alpha.UIDiscoverStartedEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	20, // 5: prehog.v1alpha.UIDiscoverStartedEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 6: prehog.v1alpha.UIDiscoverResourceSelectionEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 7: prehog.v1alpha.UIDiscoverResourceSelectionEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 8: prehog.v1alpha.UIDiscoverResourceSelectionEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 9: prehog.v1alpha.UIDiscoverDeployServiceEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 10: prehog.v1alpha.UIDiscoverDeployServiceEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 11: prehog.v1alpha.UIDiscoverDeployServiceEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 12: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 13: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 14: prehog.v1alpha.UIDiscoverDatabaseRegisterEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 15: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 16: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 17: prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 18: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 19: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 20: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 21: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 22: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 23: prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 24: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 25: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 26: prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 27: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 28: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 29: prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 30: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 31: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 32: prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 33: prehog.v1alpha.UIDiscoverTestConnectionEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 34: prehog.v1alpha.UIDiscoverTestConnectionEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 35: prehog.v1alpha.UIDiscoverTestConnectionEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	18, // 36: prehog.v1alpha.UIDiscoverCompletedEvent.metadata:type_name -> prehog.v1alpha.DiscoverMetadata
	19, // 37: prehog.v1alpha.UIDiscoverCompletedEvent.resource:type_name -> prehog.v1alpha.DiscoverResourceMetadata
	20, // 38: prehog.v1alpha.UIDiscoverCompletedEvent.status:type_name -> prehog.v1alpha.DiscoverStepStatus
	48, // 39: prehog.v1alpha.SubmitEventRequest.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 40: prehog.v1alpha.SubmitEventRequest.user_login:type_name -> prehog.v1alpha.UserLoginEvent
	4,  // 41: prehog.v1alpha.SubmitEventRequest.sso_create:type_name -> prehog.v1alpha.SSOCreateEvent
	5,  // 42: prehog.v1alpha.SubmitEventRequest.resource_create:type_name -> prehog.v1alpha.ResourceCreateEvent
	7,  // 43: prehog.v1alpha.SubmitEventRequest.session_start:type_name -> prehog.v1alpha.SessionStartEvent
	9,  // 44: prehog.v1alpha.SubmitEventRequest.ui_banner_click:type_name -> prehog.v1alpha.UIBannerClickEvent
	10, // 45: prehog.v1alpha.SubmitEventRequest.ui_onboard_complete_go_to_dashboard_click:type_name -> prehog.v1alpha.UIOnboardCompleteGoToDashboardClickEvent
	11, // 46: prehog.v1alpha.SubmitEventRequest.ui_onboard_add_first_resource_click:type_name -> prehog.v1alpha.UIOnboardAddFirstResourceClickEvent
	12, // 47: prehog.v1alpha.SubmitEventRequest.ui_onboard_add_first_resource_later_click:type_name -> prehog.v1alpha.UIOnboardAddFirstResourceLaterClickEvent
	13, // 48: prehog.v1alpha.SubmitEventRequest.ui_onboard_set_credential_submit:type_name -> prehog.v1alpha.UIOnboardSetCredentialSubmitEvent
	14, // 49: prehog.v1alpha.SubmitEventRequest.ui_onboard_register_challenge_submit:type_name -> prehog.v1alpha.UIOnboardRegisterChallengeSubmitEvent
	15, // 50: prehog.v1alpha.SubmitEventRequest.ui_recovery_codes_continue_click:type_name -> prehog.v1alpha.UIRecoveryCodesContinueClickEvent
	16, // 51: prehog.v1alpha.SubmitEventRequest.ui_recovery_codes_copy_click:type_name -> prehog.v1alpha.UIRecoveryCodesCopyClickEvent
	17, // 52: prehog.v1alpha.SubmitEventRequest.ui_recovery_codes_print_click:type_name -> prehog.v1alpha.UIRecoveryCodesPrintClickEvent
	21, // 53: prehog.v1alpha.SubmitEventRequest.ui_discover_started_event:type_name -> prehog.v1alpha.UIDiscoverStartedEvent
	22, // 54: prehog.v1alpha.SubmitEventRequest.ui_discover_resource_selection_event:type_name -> prehog.v1alpha.UIDiscoverResourceSelectionEvent
	8,  // 55: prehog.v1alpha.SubmitEventRequest.user_certificate_issued_event:type_name -> prehog.v1alpha.UserCertificateIssuedEvent
	7,  // 56: prehog.v1alpha.SubmitEventRequest.session_start_v2:type_name -> prehog.v1alpha.SessionStartEvent
	23, // 57: prehog.v1alpha.SubmitEventRequest.ui_discover_deploy_service_event:type_name -> prehog.v1alpha.UIDiscoverDeployServiceEvent
	24, // 58: prehog.v1alpha.SubmitEventRequest.ui_discover_database_register_event:type_name -> prehog.v1alpha.UIDiscoverDatabaseRegisterEvent
	25, // 59: prehog.v1alpha.SubmitEventRequest.ui_discover_database_configure_mtls_event:type_name -> prehog.v1alpha.UIDiscoverDatabaseConfigureMTLSEvent
	26, // 60: prehog.v1alpha.SubmitEventRequest.ui_discover_desktop_active_directory_tools_install_event:type_name -> prehog.v1alpha.UIDiscoverDesktopActiveDirectoryToolsInstallEvent
	27, // 61: prehog.v1alpha.SubmitEventRequest.ui_discover_desktop_active_directory_configure_event:type_name -> prehog.v1alpha.UIDiscoverDesktopActiveDirectoryConfigureEvent
	28, // 62: prehog.v1alpha.SubmitEventRequest.ui_discover_auto_discovered_resources_event:type_name -> prehog.v1alpha.UIDiscoverAutoDiscoveredResourcesEvent
	29, // 63: prehog.v1alpha.SubmitEventRequest.ui_discover_database_configure_iam_policy_event:type_name -> prehog.v1alpha.UIDiscoverDatabaseConfigureIAMPolicyEvent
	30, // 64: prehog.v1alpha.SubmitEventRequest.ui_discover_principals_configure_event:type_name -> prehog.v1alpha.UIDiscoverPrincipalsConfigureEvent
	31, // 65: prehog.v1alpha.SubmitEventRequest.ui_discover_test_connection_event:type_name -> prehog.v1alpha.UIDiscoverTestConnectionEvent
	32, // 66: prehog.v1alpha.SubmitEventRequest.ui_discover_completed_event:type_name -> prehog.v1alpha.UIDiscoverCompletedEvent
	33, // 67: prehog.v1alpha.SubmitEventRequest.role_create:type_name -> prehog.v1alpha.RoleCreateEvent
	34, // 68: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_click:type_name -> prehog.v1alpha.UICreateNewRoleClickEvent
	35, // 69: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_save_click:type_name -> prehog.v1alpha.UICreateNewRoleSaveClickEvent
	36, // 70: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_cancel_click:type_name -> prehog.v1alpha.UICreateNewRoleCancelClickEvent
	37, // 71: prehog.v1alpha.SubmitEventRequest.ui_create_new_role_view_documentation_click:type_name -> prehog.v1alpha.UICreateNewRoleViewDocumentationClickEvent
	38, // 72: prehog.v1alpha.SubmitEventRequest.kube_request:type_name -> prehog.v1alpha.KubeRequestEvent
	39, // 73: prehog.v1alpha.SubmitEventRequest.sftp:type_name -> prehog.v1alpha.SFTPEvent
	40, // 74: prehog.v1alpha.SubmitEventRequest.agent_metadata_event:type_name -> prehog.v1alpha.AgentMetadataEvent
	6,  // 75: prehog.v1alpha.SubmitEventRequest.resource_heartbeat:type_name -> prehog.v1alpha.ResourceHeartbeatEvent
	41, // 76: prehog.v1alpha.SubmitEventsRequest.events:type_name -> prehog.v1alpha.SubmitEventRequest
	41, // 77: prehog.v1alpha.TeleportReportingService.SubmitEvent:input_type -> prehog.v1alpha.SubmitEventRequest
	43, // 78: prehog.v1alpha.TeleportReportingService.SubmitEvents:input_type -> prehog.v1alpha.SubmitEventsRequest
	45, // 79: prehog.v1alpha.TeleportReportingService.HelloTeleport:input_type -> prehog.v1alpha.HelloTeleportRequest
	42, // 80: prehog.v1alpha.TeleportReportingService.SubmitEvent:output_type -> prehog.v1alpha.SubmitEventResponse
	44, // 81: prehog.v1alpha.TeleportReportingService.SubmitEvents:output_type -> prehog.v1alpha.SubmitEventsResponse
	46, // 82: prehog.v1alpha.TeleportReportingService.HelloTeleport:output_type -> prehog.v1alpha.HelloTeleportResponse
	80, // [80:83] is the sub-list for method output_type
	77, // [77:80] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_prehog_v1alpha_teleport_proto_init() }
func file_prehog_v1alpha_teleport_proto_init() {
	if File_prehog_v1alpha_teleport_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prehog_v1alpha_teleport_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSOCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceHeartbeatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCertificateIssuedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIBannerClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIOnboardCompleteGoToDashboardClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIOnboardAddFirstResourceClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIOnboardAddFirstResourceLaterClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIOnboardSetCredentialSubmitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIOnboardRegisterChallengeSubmitEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIRecoveryCodesContinueClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIRecoveryCodesCopyClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIRecoveryCodesPrintClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverResourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverStepStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverResourceSelectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverDeployServiceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverDatabaseRegisterEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverDatabaseConfigureMTLSEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverDesktopActiveDirectoryToolsInstallEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverDesktopActiveDirectoryConfigureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverAutoDiscoveredResourcesEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverDatabaseConfigureIAMPolicyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverPrincipalsConfigureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverTestConnectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDiscoverCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UICreateNewRoleClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UICreateNewRoleSaveClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UICreateNewRoleCancelClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UICreateNewRoleViewDocumentationClickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFTPEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetadataEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloTeleportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prehog_v1alpha_teleport_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloTeleportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prehog_v1alpha_teleport_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*SubmitEventRequest_UserLogin)(nil),
		(*SubmitEventRequest_SsoCreate)(nil),
		(*SubmitEventRequest_ResourceCreate)(nil),
		(*SubmitEventRequest_SessionStart)(nil),
		(*SubmitEventRequest_UiBannerClick)(nil),
		(*SubmitEventRequest_UiOnboardCompleteGoToDashboardClick)(nil),
		(*SubmitEventRequest_UiOnboardAddFirstResourceClick)(nil),
		(*SubmitEventRequest_UiOnboardAddFirstResourceLaterClick)(nil),
		(*SubmitEventRequest_UiOnboardSetCredentialSubmit)(nil),
		(*SubmitEventRequest_UiOnboardRegisterChallengeSubmit)(nil),
		(*SubmitEventRequest_UiRecoveryCodesContinueClick)(nil),
		(*SubmitEventRequest_UiRecoveryCodesCopyClick)(nil),
		(*SubmitEventRequest_UiRecoveryCodesPrintClick)(nil),
		(*SubmitEventRequest_UiDiscoverStartedEvent)(nil),
		(*SubmitEventRequest_UiDiscoverResourceSelectionEvent)(nil),
		(*SubmitEventRequest_UserCertificateIssuedEvent)(nil),
		(*SubmitEventRequest_SessionStartV2)(nil),
		(*SubmitEventRequest_UiDiscoverDeployServiceEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDatabaseRegisterEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDatabaseConfigureMtlsEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryToolsInstallEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDesktopActiveDirectoryConfigureEvent)(nil),
		(*SubmitEventRequest_UiDiscoverAutoDiscoveredResourcesEvent)(nil),
		(*SubmitEventRequest_UiDiscoverDatabaseConfigureIamPolicyEvent)(nil),
		(*SubmitEventRequest_UiDiscoverPrincipalsConfigureEvent)(nil),
		(*SubmitEventRequest_UiDiscoverTestConnectionEvent)(nil),
		(*SubmitEventRequest_UiDiscoverCompletedEvent)(nil),
		(*SubmitEventRequest_RoleCreate)(nil),
		(*SubmitEventRequest_UiCreateNewRoleClick)(nil),
		(*SubmitEventRequest_UiCreateNewRoleSaveClick)(nil),
		(*SubmitEventRequest_UiCreateNewRoleCancelClick)(nil),
		(*SubmitEventRequest_UiCreateNewRoleViewDocumentationClick)(nil),
		(*SubmitEventRequest_KubeRequest)(nil),
		(*SubmitEventRequest_Sftp)(nil),
		(*SubmitEventRequest_AgentMetadataEvent)(nil),
		(*SubmitEventRequest_ResourceHeartbeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prehog_v1alpha_teleport_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prehog_v1alpha_teleport_proto_goTypes,
		DependencyIndexes: file_prehog_v1alpha_teleport_proto_depIdxs,
		EnumInfos:         file_prehog_v1alpha_teleport_proto_enumTypes,
		MessageInfos:      file_prehog_v1alpha_teleport_proto_msgTypes,
	}.Build()
	File_prehog_v1alpha_teleport_proto = out.File
	file_prehog_v1alpha_teleport_proto_rawDesc = nil
	file_prehog_v1alpha_teleport_proto_goTypes = nil
	file_prehog_v1alpha_teleport_proto_depIdxs = nil
}
