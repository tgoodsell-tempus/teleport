// Copyright 2021-2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.samlidp.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/samlidp/v1";

// ProcessSAMLIdPRequestRequest is a request to create and sign the SAML IdP response
// to a SAML IdP auth request.
message ProcessSAMLIdPRequestRequest {
  // destination is the destination of the response.
  string destination = 1;
  // request_id is the request ID.
  string request_id = 2;
  // request_time is the time the request was made.
  google.protobuf.Timestamp request_time = 3;
  // Metadata_url is the metadata URL of the SAML IdP.
  string metadata_url = 4;
  // signature_method is the signature method to use.
  string signature_method = 5;
  // assertion is the SAML assertion to sign.
  bytes assertion = 6;
  // service_provider_sso_descriptor is the raw bytes of the service provider's SSO descriptor.
  bytes service_provider_sso_descriptor = 7;
}

// ProcessSAMLIdPRequestResponse is a response to processing the SAML IdP auth request.
message ProcessSAMLIdPRequestResponse {
  // response is the SAML response.
  bytes response = 1;
}

// SAMLIdPService provides utility methods for the SAML identity provider.
service SAMLIdPService {
  // ProcessSAMLIdPRequest processes the SAML auth request.
  rpc ProcessSAMLIdPRequest(ProcessSAMLIdPRequestRequest) returns (ProcessSAMLIdPRequestResponse);
}
