// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: teleport/trust/v1/trust_service.proto

package v1

import (
	context "context"
	types "github.com/gravitational/teleport/api/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrustServiceClient is the client API for TrustService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustServiceClient interface {
	// GetCertAuthority returns a cert authority by type and domain.
	GetCertAuthority(ctx context.Context, in *GetCertAuthorityRequest, opts ...grpc.CallOption) (*types.CertAuthorityV2, error)
}

type trustServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustServiceClient(cc grpc.ClientConnInterface) TrustServiceClient {
	return &trustServiceClient{cc}
}

func (c *trustServiceClient) GetCertAuthority(ctx context.Context, in *GetCertAuthorityRequest, opts ...grpc.CallOption) (*types.CertAuthorityV2, error) {
	out := new(types.CertAuthorityV2)
	err := c.cc.Invoke(ctx, "/teleport.trust.v1.TrustService/GetCertAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustServiceServer is the server API for TrustService service.
// All implementations must embed UnimplementedTrustServiceServer
// for forward compatibility
type TrustServiceServer interface {
	// GetCertAuthority returns a cert authority by type and domain.
	GetCertAuthority(context.Context, *GetCertAuthorityRequest) (*types.CertAuthorityV2, error)
	mustEmbedUnimplementedTrustServiceServer()
}

// UnimplementedTrustServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrustServiceServer struct {
}

func (UnimplementedTrustServiceServer) GetCertAuthority(context.Context, *GetCertAuthorityRequest) (*types.CertAuthorityV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertAuthority not implemented")
}
func (UnimplementedTrustServiceServer) mustEmbedUnimplementedTrustServiceServer() {}

// UnsafeTrustServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustServiceServer will
// result in compilation errors.
type UnsafeTrustServiceServer interface {
	mustEmbedUnimplementedTrustServiceServer()
}

func RegisterTrustServiceServer(s grpc.ServiceRegistrar, srv TrustServiceServer) {
	s.RegisterService(&TrustService_ServiceDesc, srv)
}

func _TrustService_GetCertAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustServiceServer).GetCertAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.trust.v1.TrustService/GetCertAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustServiceServer).GetCertAuthority(ctx, req.(*GetCertAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustService_ServiceDesc is the grpc.ServiceDesc for TrustService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.trust.v1.TrustService",
	HandlerType: (*TrustServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertAuthority",
			Handler:    _TrustService_GetCertAuthority_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/trust/v1/trust_service.proto",
}
