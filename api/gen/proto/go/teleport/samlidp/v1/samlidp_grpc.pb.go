// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: teleport/samlidp/v1/samlidp.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SAMLIdPServiceClient is the client API for SAMLIdPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SAMLIdPServiceClient interface {
	// ProcessSAMLIdPRequest processes the SAML auth request.
	ProcessSAMLIdPRequest(ctx context.Context, in *ProcessSAMLIdPRequestRequest, opts ...grpc.CallOption) (*ProcessSAMLIdPRequestResponse, error)
}

type sAMLIdPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSAMLIdPServiceClient(cc grpc.ClientConnInterface) SAMLIdPServiceClient {
	return &sAMLIdPServiceClient{cc}
}

func (c *sAMLIdPServiceClient) ProcessSAMLIdPRequest(ctx context.Context, in *ProcessSAMLIdPRequestRequest, opts ...grpc.CallOption) (*ProcessSAMLIdPRequestResponse, error) {
	out := new(ProcessSAMLIdPRequestResponse)
	err := c.cc.Invoke(ctx, "/teleport.samlidp.v1.SAMLIdPService/ProcessSAMLIdPRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SAMLIdPServiceServer is the server API for SAMLIdPService service.
// All implementations must embed UnimplementedSAMLIdPServiceServer
// for forward compatibility
type SAMLIdPServiceServer interface {
	// ProcessSAMLIdPRequest processes the SAML auth request.
	ProcessSAMLIdPRequest(context.Context, *ProcessSAMLIdPRequestRequest) (*ProcessSAMLIdPRequestResponse, error)
	mustEmbedUnimplementedSAMLIdPServiceServer()
}

// UnimplementedSAMLIdPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSAMLIdPServiceServer struct {
}

func (UnimplementedSAMLIdPServiceServer) ProcessSAMLIdPRequest(context.Context, *ProcessSAMLIdPRequestRequest) (*ProcessSAMLIdPRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSAMLIdPRequest not implemented")
}
func (UnimplementedSAMLIdPServiceServer) mustEmbedUnimplementedSAMLIdPServiceServer() {}

// UnsafeSAMLIdPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SAMLIdPServiceServer will
// result in compilation errors.
type UnsafeSAMLIdPServiceServer interface {
	mustEmbedUnimplementedSAMLIdPServiceServer()
}

func RegisterSAMLIdPServiceServer(s grpc.ServiceRegistrar, srv SAMLIdPServiceServer) {
	s.RegisterService(&SAMLIdPService_ServiceDesc, srv)
}

func _SAMLIdPService_ProcessSAMLIdPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSAMLIdPRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAMLIdPServiceServer).ProcessSAMLIdPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.samlidp.v1.SAMLIdPService/ProcessSAMLIdPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAMLIdPServiceServer).ProcessSAMLIdPRequest(ctx, req.(*ProcessSAMLIdPRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SAMLIdPService_ServiceDesc is the grpc.ServiceDesc for SAMLIdPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SAMLIdPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.samlidp.v1.SAMLIdPService",
	HandlerType: (*SAMLIdPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessSAMLIdPRequest",
			Handler:    _SAMLIdPService_ProcessSAMLIdPRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/samlidp/v1/samlidp.proto",
}
