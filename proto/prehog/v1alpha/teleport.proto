// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package prehog.v1alpha;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/gravitational/teleport/gen/proto/go/prehog/v1alpha";

message UserLoginEvent {
  // anonymized
  string user_name = 1;
  // local/github/saml/oidc
  string connector_type = 2;
  // The anonymized device ID, for logins where device trust is enabled.
  string device_id = 3;
}

message SSOCreateEvent {
  // github/saml/oidc
  string connector_type = 1;
}

message ResourceCreateEvent {
  // TODO(espadolini): is a resource the teleport process or the
  // databases/desktops/kube clusters accessed through it?
  string resource_type = 1;

  // TODO(espadolini): flags for Discover, autodiscovery, join scripts?
}

// the kind of a "resource" as intended by ResourceHeartbeatEvent
enum ResourceKind {
  RESOURCE_KIND_UNSPECIFIED = 0;
  RESOURCE_KIND_NODE = 1;
  RESOURCE_KIND_APP_SERVER = 2;
  RESOURCE_KIND_KUBE_SERVER = 3;
  RESOURCE_KIND_DB_SERVER = 4;
  RESOURCE_KIND_WINDOWS_DESKTOP = 5;
  RESOURCE_KIND_NODE_OPENSSH = 6;
}

// a heartbeat for a resource served by a Teleport instance outside of the
// control plane (i.e. not auth, not proxy)
message ResourceHeartbeatEvent {
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes resource_name = 1;
  ResourceKind resource_kind = 2;
  // true if the heartbeat has no expiration
  bool static = 3;
}

message SessionStartEvent {
  // anonymized
  string user_name = 1;
  // ssh/kube/desktop, maybe db?
  string session_type = 2;
}

message UserCertificateIssuedEvent {
  // The anonymized username/principal of the entity that requested the
  // certificate.
  string user_name = 1;
  // The issued certificate TTL.
  google.protobuf.Duration ttl = 2;
  // If true, the certificate was requested by a bot (i.e. Machine ID) user.
  bool is_bot = 3;
  // If true, the certificate usage is restricted to database access.
  bool usage_database = 4;
  // If true, the certificate usage is restricted to app access.
  bool usage_app = 5;
  // If true, the certificate usage is restricted to Kubernetes access.
  bool usage_kubernetes = 6;
  // If true, the certificate usage is restricted to desktop access.
  bool usage_desktop = 7;
}

message UIBannerClickEvent {
  // anonymized
  string user_name = 1;
  // cluster alert name
  string alert = 2;
}

message UIOnboardCompleteGoToDashboardClickEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardAddFirstResourceClickEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardAddFirstResourceLaterClickEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardSetCredentialSubmitEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardRegisterChallengeSubmitEvent {
  // anonymized
  string user_name = 1;
  string mfa_type = 2;
  string login_flow = 3;
}

message UIRecoveryCodesContinueClickEvent {
  // anonymized
  string user_name = 1;
}

message UIRecoveryCodesCopyClickEvent {
  // anonymized
  string user_name = 1;
}

message UIRecoveryCodesPrintClickEvent {
  // anonymized
  string user_name = 1;
}

// DiscoverMetadata contains common metadata for Discover related events.
message DiscoverMetadata {
  // Uniquely identifies Discover wizard "session". Will allow to correlate
  // events within the same Discover wizard run.
  string id = 1;

  // anonymized
  string user_name = 2;
}

// DiscoverResource represents a resource type.
enum DiscoverResource {
  DISCOVER_RESOURCE_UNSPECIFIED = 0;
  DISCOVER_RESOURCE_SERVER = 1;
  DISCOVER_RESOURCE_KUBERNETES = 2;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
  DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
  DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
  DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
  DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
  DISCOVER_RESOURCE_APPLICATION_TCP = 9;
  DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS = 11;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT = 12;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED = 13;
  DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED = 14;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP = 15;
  DISCOVER_RESOURCE_DATABASE_MYSQL_GCP = 16;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP = 17;
}

// DiscoverResourceMetadata contains common metadata identifying resource type being added.
message DiscoverResourceMetadata {
  // Resource type that is being added.
  DiscoverResource resource = 1;
}

// DiscoverStatus represents a Discover Step outcome.
enum DiscoverStatus {
  DISCOVER_STATUS_UNSPECIFIED = 0;
  // The user tried to complete the action and it succeeded.
  DISCOVER_STATUS_SUCCESS = 1;
  // The system skipped the step.
  // For example:
  // When setting up a Database and there's already a Database Service proxying the DB.
  // In this case the Database Agent installation is skipped.
  DISCOVER_STATUS_SKIPPED = 2;
  // The user tried to complete the action and it failed.
  DISCOVER_STATUS_ERROR = 3;
  // The user did not complete the action and left the wizard.
  DISCOVER_STATUS_ABORTED = 4;
}

// DiscoverStepStatus contains fields that track a particular step outcome,
// for example connection test failed or succeeded, or user aborted the step.
message DiscoverStepStatus {
  // Indicates the step outcome.
  DiscoverStatus status = 1;
  // Contains error details in case of Error Status.
  // We have to be careful to not include any identifyable infomation like server addresses here.
  string error = 2;
}

// UIDiscoverStartedEvent is emitted when the wizard opens.
message UIDiscoverStartedEvent {
  DiscoverMetadata metadata = 1;
  DiscoverStepStatus status = 2;
}

// UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
// and proceeded to the next step.
message UIDiscoverResourceSelectionEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
// For SSH this is the Teleport 'install-node' script.
//
// For Kubernetes this is the teleport-agent helm chart installation.
//
// For Database Access this step is the installation of the teleport 'install-db' script.
// It can be skipped if the cluster already has a Database Service capable of proxying the database.
message UIDiscoverDeployServiceEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
message UIDiscoverDatabaseRegisterEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
message UIDiscoverDatabaseConfigureMTLSEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
message UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
message UIDiscoverDesktopActiveDirectoryConfigureEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
// resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
message UIDiscoverAutoDiscoveredResourcesEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
  int64 resources_count = 4;
}

// UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
message UIDiscoverDatabaseConfigureIAMPolicyEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
message UIDiscoverPrincipalsConfigureEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
// when the user clicked tested connection to their resource.
message UIDiscoverTestConnectionEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
message UIDiscoverCompletedEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// RoleCreateEvent is emitted when user creates a custom role.
message RoleCreateEvent {
  // anonymized
  string user_name = 1;
  // anonymized
  string role_name = 2;
}

message UICreateNewRoleClickEvent {
  //anonymized
  string user_name = 1;
}
message UICreateNewRoleSaveClickEvent {
  //anonymized
  string user_name = 1;
}
message UICreateNewRoleCancelClickEvent {
  //anonymized
  string user_name = 1;
}
message UICreateNewRoleViewDocumentationClickEvent {
  //anonymized
  string user_name = 1;
}

message KubeRequestEvent {
  // anonymized
  string user_name = 1;
}

message SFTPEvent {
  // anonymized
  string user_name = 1;
  // matching SFTPAction in teleport/api/types/events/events.proto
  int32 action = 2;
}

message AgentMetadataEvent {
  string version = 1;
  string host_id = 2;
  repeated string services = 3;
  string os = 4;
  string os_version = 5;
  string host_architecture = 6;
  string glibc_version = 7;
  repeated string install_methods = 8;
  string container_runtime = 9;
  string container_orchestrator = 10;
  string cloud_environment = 11;
}

message SubmitEventRequest {
  // anonymized
  string cluster_name = 1;

  // optional, will default to the ingest time if unset
  google.protobuf.Timestamp timestamp = 2;

  oneof event {
    UserLoginEvent user_login = 3;
    SSOCreateEvent sso_create = 4;
    ResourceCreateEvent resource_create = 5;

    // REMOVE IN V14: Use session_start_v2 instead
    SessionStartEvent session_start = 6;

    UIBannerClickEvent ui_banner_click = 7;
    UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 9;
    UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 10;
    UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 11;
    UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 12;
    UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 13;
    UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 14;
    UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 15;
    UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 16;

    UIDiscoverStartedEvent ui_discover_started_event = 17;
    UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 18;

    UserCertificateIssuedEvent user_certificate_issued_event = 19;

    // Note: semantics of SessionStartEvent type values have changed to
    // differentiate SSH from Kubernetes exec sessions (as well as adding
    // db/app/desktop events). The structures are the same, however, so we don't
    // need a new message type.
    SessionStartEvent session_start_v2 = 20;

    UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 21;
    UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 22;
    UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 23;
    UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 24;
    UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 25;
    UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 26;
    UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 27;
    UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 28;
    UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 29;
    UIDiscoverCompletedEvent ui_discover_completed_event = 30;

    RoleCreateEvent role_create = 31;

    UICreateNewRoleClickEvent ui_create_new_role_click = 32;
    UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 33;
    UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 34;
    UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 35;

    KubeRequestEvent kube_request = 36;
    SFTPEvent sftp = 37;
    AgentMetadataEvent agent_metadata_event = 38;
    ResourceHeartbeatEvent resource_heartbeat = 39;
  }

  reserved 8; // UIOnboardGetStartedClickEvent
  reserved "ui_onboard_get_started_click";
}
message SubmitEventResponse {}

message SubmitEventsRequest {
  repeated SubmitEventRequest events = 1;
}
message SubmitEventsResponse {}

message HelloTeleportRequest {}
message HelloTeleportResponse {}

message UserActivityReport {
  // randomly generated UUID for this specific report, 16 bytes (in string order)
  bytes report_id = 1;
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes cluster_name = 2;
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes reporter_id = 3;
  // beginning of the time window for this data; ending is not specified but is
  // intended to be at most 15 minutes
  google.protobuf.Timestamp start_time = 4;

  repeated UserActivityRecord records = 5;
}

message UserActivityRecord {
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes user_name = 1;

  // counter of user.login events
  uint64 logins = 2;

  // counter of session.start events (non-Kube)
  uint64 ssh_sessions = 3;
  // counter of app.session.start events (non-TCP)
  uint64 app_sessions = 4;
  // counter of session.start events (only Kube)
  uint64 kube_sessions = 5;
  // counter of db.session.start events
  uint64 db_sessions = 6;
  // counter of windows.desktop.session.start events
  uint64 desktop_sessions = 7;
  // counter of app.session.start events (only TCP)
  uint64 app_tcp_sessions = 8;
  // counter of port events
  uint64 ssh_port_sessions = 9;

  // counter of kube.request events
  uint64 kube_requests = 10;
  // counter of sftp events
  uint64 sftp_events = 11;
}

message SubmitUsageReportsRequest {
  repeated UserActivityReport user_activity = 1;
}
message SubmitUsageReportsResponse {}

service TeleportReportingService {
  rpc SubmitEvent(SubmitEventRequest) returns (SubmitEventResponse) {
    option deprecated = true;
  }
  rpc SubmitEvents(SubmitEventsRequest) returns (SubmitEventsResponse) {}
  rpc HelloTeleport(HelloTeleportRequest) returns (HelloTeleportResponse) {}

  rpc SubmitUsageReports(SubmitUsageReportsRequest) returns (SubmitUsageReportsResponse) {}
}
